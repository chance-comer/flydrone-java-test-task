Необходимо разработать приложение, представляющее из себя веб-сервер с набором эндпойнтов.  

Для начала вполне можно ограничиться простым приложением для работы с профилем пользователя и его автаркой.


Данные профиля пользователя должны представлять из себя объект со следующими полями:
	* Id (числовое поле)
	* Фамилия (поле обязательно для заполнения)
	* Имя (поле обязательно для заполнения)
	* Отчество (необязательное поле, может отсутствовать)
	* Дата рождения (поле обязательно для заполнения, пользователю должно быть 18 и более лет)

Аватарка должна представлять из себя jpg или png размером не более 2 Мб. 

Приложение должно предоставлять следующие эдпойнты:
1. GET /api/profile - получение профиля пользователя. 
   Входные параметры: id пользователя. 
   Возвращаемое значение: 
       http-код 200 и json с профилем пользователя, если получение данных прошло успешно, 
       или код 404, если пользователь с указанным id не найден
2. POST /api/profile - создание/изменение профиля пользователя. 
   Входные параметры: json с профилем пользователя. 
   Если id пользователя заполнен, то выполняется обновление существующего профиля, если id осутствует - создаётся новый профиль. 
   Возвращаемое значение: 
       http-код 200 и id пользователя 
       или код 404, если пользователь с указанным id отсутствует.
3. DELETE /api/profile - удаление профиля пользователя. 
   Входные параметры: id пользователя. 
   Возвращаемое значение: 
       http-код 200, если удаление данных прошло успешно, 
       или код 404, если пользователь с указанным id не найден. 
   При удалении профиля так же должна удаляться связанная с ним аватарка пользователя, если она загружена.
4. GET /api/avatar - получить аватарку пользователя.
   Входные параметры: id пользователя. 
   Возвращаемое значение: 
       http-код 200 и файл с аватаркой пользователя, если получение данных прошло успешно, 
       или код 404, если пользователь с указанным id не найден или для пользователя не загружена аватарка.
5. POST /api/avatar - загрузить аватарку пользователя. 
   Входные параметры: id пользователя и файл аватарки. 
   Возвращаемое значение: 
       http-код 200, если загрузка прошла успешно 
       или код 404, если пользователь с указанным id не найден.
6. DELETE /api/avatar - удалить аватарку пользователя. 
   Входные параметры: id пользователя. 
   Возвращаемое значение: 
       http-код 200, если удаление прошло успешно 
       или код 404, если пользователь с указанным id не найден.

7. POST /api/fullprofile - сохранение профиля пользователя вместе с аватаркой. 
    Входные параметры: json с профилем пользователя и файл аватарки. 
    Если id пользователя заполнен, то выполняется обновление существующего профиля, если id осутствует - создаётся новый профиль. 
    Возвращаемое значение: http-код 200 и id пользователя или код 404, если пользователь с указанным id отсутствует.

Все входные параметры должны проходить валидацию. Т.е. все поля профиля должны соответствовать описанию выще. 
Файл аватарки должен быть в формате jpg или png и не превышать размером 2 Мб. 
Если входные параметры не проходят валидацию, то обработка запроса должна быть прервана. Эндпойнт в этом случае должен вернуть http-код 400.

Приложение должно быть разработано с использованием Spring Boot. Для сборки проекта и управления зависимостями должен быть использован Apache Maven.
В качестве БД рекомендуется использовать PostgreSQL. Использование других БД допустимо. Для работы с БД приложение должно использовать Spring JDBC.
Все эндпойнты должны быть документированы по стандарту OpenAPI 3. Рекомендуется для этого использовать библиотеку springdoc-openapi-ui